/**
 * @author generated by eTrice
 *
 * Header File of ProtocolClass PSendData
 * 
 */

#ifndef _TEMPLATEMODEL_PSENDDATA_H_
#define _TEMPLATEMODEL_PSENDDATA_H_

#include "etDatatypes.h"
#include "modelbase/etPort.h"


/* include all referenced room classes */
#include "TemplateModel/DDataBuffer.h"


/* message IDs */
enum PSendData_msg_ids {
	PSendData_MSG_MIN = 0,
	PSendData_OUT_receivedData = 1,
	PSendData_IN_sendData = 2,
	PSendData_IN_forRingControl = 3,
	PSendData_MSG_MAX = 4
};

/*--------------------- port structs and methods */
typedef etPort PSendDataPort;
typedef etReplPort PSendDataReplPort;


void PSendDataPort_receivedData(const PSendDataPort* self, DDataBuffer* data);
void PSendDataReplPort_receivedData_broadcast(const PSendDataReplPort* self, DDataBuffer* data);
void PSendDataReplPort_receivedData(const PSendDataReplPort* self, int idx, DDataBuffer* data);


etInt32 PSendDataReplPort_getReplication(const PSendDataReplPort* self);
typedef etPort PSendDataConjPort;
typedef etReplPort PSendDataConjReplPort;


void PSendDataConjPort_sendData(const PSendDataConjPort* self, DDataBuffer* data);
void PSendDataConjReplPort_sendData_broadcast(const PSendDataConjReplPort* self, DDataBuffer* data);
void PSendDataConjReplPort_sendData(const PSendDataConjReplPort* self, int idx, DDataBuffer* data);
void PSendDataConjPort_forRingControl(const PSendDataConjPort* self);
void PSendDataConjReplPort_forRingControl_broadcast(const PSendDataConjReplPort* self);
void PSendDataConjReplPort_forRingControl(const PSendDataConjReplPort* self, int idx);


etInt32 PSendDataConjReplPort_getReplication(const PSendDataConjReplPort* self);

/*--------------------- debug helpers */

/* get message string for message id */
const char* PSendData_getMessageString(int msg_id);


#endif /* _TEMPLATEMODEL_PSENDDATA_H_ */

