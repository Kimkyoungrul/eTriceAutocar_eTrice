RoomModel PortRoles {
	
	// Port role distinction only
		
	ActorClass InternalEndPortExample {
		Structure {
			Port internalEndPort : PSimpleProtocol
			ActorRef actorRef1 : SimpleActorClass1
			
			// internalEndPort lives 'local' 
			// and thus needs a Binding to port of an ActorRef
			Binding internalEndPort and actorRef1.externalPort
		}
		Behavior {
			// send/receive messages from internalEndPorts
		}
	}
	
	ActorClass ExternalEndPortExample {
		Interface {
			// externalEndPort is connect from 'outside'
			// and thus needs a Binding from containing ActorClass
			Port externalEndPort : PSimpleProtocol
		}
		Structure {
			external Port externalEndPort
		}
		Behavior {
			// send/receive messages from externalEndPort
		}
	}
	
	ActorClass RelayPortExample{
		Interface {
			Port relayPort : PSimpleProtocol
		}
		Structure {
			ActorRef actorRef1 : SimpleActorClass2
			
			// relayPort can be directed to port of an ActorRef
			Binding relayPort and actorRef1.externalPort
		}
		Behavior {
			// relayPort not available !
		}
	}
	
	eventdriven ProtocolClass PSimpleProtocol {
		incoming {
			Message message1()
		}
		outgoing {
			Message message2()
		}
	}
	
	ActorClass SimpleActorClass2 {
		Interface {
			Port externalPort : PSimpleProtocol
		}
	}
	
	ActorClass SimpleActorClass1 {
		Interface {
			conjugated Port externalPort : PSimpleProtocol
		}
	}	
}