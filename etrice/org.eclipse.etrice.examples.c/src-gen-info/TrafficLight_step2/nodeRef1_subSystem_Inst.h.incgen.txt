/**
 * @author generated by eTrice
 *
 * Instance File of Node nodeRef1 with SubSystem subSystem
 * - instantiation of all actor instances and port instances
 * - configuration of data and connection of ports
 */

#include "messaging/etMessageService.h"

/* include all referenced room classes */
#include "room/basic/service/tcp/ATcpClient.h"
#include "room/basic/service/timing/ATimingService.h"
#include "TrafficLight/PedestrianTrafficLightController.h"
#include "TrafficLight/SingleTrafficLight.h"
#include "TrafficLight/TrafficLightHeadquarters.h"
#include "TrafficLight/TrafficLightInterface.h"

/* instantiation of message services and message buffers */
/* PhysicalThread1 */
#define PHYSICALTHREAD1_POOL_SIZE		100
#define PHYSICALTHREAD1_BLOCK_SIZE	64
static uint8 msgBuffer_PhysicalThread1[PHYSICALTHREAD1_POOL_SIZE * PHYSICALTHREAD1_BLOCK_SIZE];
static etMessageService msgService_PhysicalThread1;

/* declarations of all ActorClass instances (const and variable structs) */

/* forward declaration of variable actor structs */
static ATimingService _TrafficLight_subSystem_timingService;
static SingleTrafficLight _TrafficLight_subSystem_step2_SingleTrafficLight;
static PedestrianTrafficLightController _TrafficLight_subSystem_step2_SingleTrafficLight_controller;
static TrafficLightHeadquarters _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1;
static ATcpClient _TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient;
static TrafficLightInterface _TrafficLight_subSystem_step2_SingleTrafficLight_ref0;

/* forward declaration of variable port structs */
/* nothing to do */
static PTimerConjPort_var _TrafficLight_subSystem_step2_SingleTrafficLight_controller_to_var={
	0		/* status */
							};
static PTimerConjPort_var _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_to_var={
	0		/* status */
							};


/* instance _TrafficLight_subSystem_timingService */
static const etReplSubPort _TrafficLight_subSystem_timingService_repl_sub_ports[2] = {
	/* Replicated Sub Ports: {varData, msgService, peerAddress, localId, index} */
	{{NULL,&msgService_PhysicalThread1, 8+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/timingService"
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/controller"
	#endif
	},0}, /* Repl Sub Port timer idx +0*/
	{{NULL,&msgService_PhysicalThread1, 12+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/timingService"
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/headquarters1"
	#endif
	},1} /* Repl Sub Port timer idx +1*/
};
static /*const*/ ATimingService_const _TrafficLight_subSystem_timingService_const = {
	"/TrafficLight/subSystem/timingService"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
	,{2, _TrafficLight_subSystem_timingService_repl_sub_ports+0}
};
static ATimingService _TrafficLight_subSystem_timingService = {
	&_TrafficLight_subSystem_timingService_const,

	/* data send ports */

	/* attributes */
	{ {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL}, {{0,0},{0,0},0,NULL} } 		/* tcbs[30] */,
	NULL		/* usedTcbsRoot */,
	NULL		/* freeTcbsRoot */

	/* state and history are initialized in init function */
};

/* instance _TrafficLight_subSystem_step2_SingleTrafficLight */
static /*const*/ SingleTrafficLight_const _TrafficLight_subSystem_step2_SingleTrafficLight_const = {
	"/TrafficLight/subSystem/step2_SingleTrafficLight"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static SingleTrafficLight _TrafficLight_subSystem_step2_SingleTrafficLight = {
	&_TrafficLight_subSystem_step2_SingleTrafficLight_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _TrafficLight_subSystem_step2_SingleTrafficLight_controller */
static /*const*/ PedestrianTrafficLightController_const _TrafficLight_subSystem_step2_SingleTrafficLight_controller_const = {
	"/TrafficLight/subSystem/step2_SingleTrafficLight/controller"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_PhysicalThread1, 10+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/controller","/TrafficLight/subSystem/step2_SingleTrafficLight/headquarters1"
	#endif
	} /* Port fct */
	,{NULL, &msgService_PhysicalThread1, 17+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/controller","/TrafficLight/subSystem/step2_SingleTrafficLight/ref0"
	#endif
	} /* Port tlInterface */

	/* data receive ports */

	/* saps */
	,{&_TrafficLight_subSystem_step2_SingleTrafficLight_controller_to_var, &msgService_PhysicalThread1, 2+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/controller","/TrafficLight/subSystem/timingService"
	#endif
	} /* Port to */

	/* replicated ports */

	/* services */
};
static PedestrianTrafficLightController _TrafficLight_subSystem_step2_SingleTrafficLight_controller = {
	&_TrafficLight_subSystem_step2_SingleTrafficLight_controller_const,

	/* data send ports */

	/* attributes */
	0		/* timeBase */

	/* state and history are initialized in init function */
};

/* instance _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1 */
static const etReplSubPort _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_repl_sub_ports[1] = {
	/* Replicated Sub Ports: {varData, msgService, peerAddress, localId, index} */
	{{NULL,&msgService_PhysicalThread1, 6+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/headquarters1"
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/controller"
	#endif
	},0} /* Repl Sub Port controllers idx +0*/
};
static /*const*/ TrafficLightHeadquarters_const _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_const = {
	"/TrafficLight/subSystem/step2_SingleTrafficLight/headquarters1"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */

	/* data receive ports */

	/* saps */
	,{&_TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_to_var, &msgService_PhysicalThread1, 3+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/headquarters1","/TrafficLight/subSystem/timingService"
	#endif
	} /* Port to */

	/* replicated ports */
	,{1, _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_repl_sub_ports+0}

	/* services */
};
static TrafficLightHeadquarters _TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1 = {
	&_TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

/* instance _TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient */
static /*const*/ ATcpClient_const _TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient_const = {
	"/TrafficLight/subSystem/step2_SingleTrafficLight/tcpClient"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_PhysicalThread1, 18+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/tcpClient","/TrafficLight/subSystem/step2_SingleTrafficLight/ref0"
	#endif
	} /* Port controlPort */
	,{NULL, &msgService_PhysicalThread1, 19+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/tcpClient","/TrafficLight/subSystem/step2_SingleTrafficLight/ref0"
	#endif
	} /* Port payloadPort */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static ATcpClient _TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient = {
	&_TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient_const,

	/* data send ports */

	/* attributes */
	0		/* lastError */,
	{
		0		/* connectionId */,
		0		/* length */,
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}		/* data[32] */
	}		/* payloadRecvBuffer */,
	NULL		/* client */

	/* state and history are initialized in init function */
};

/* instance _TrafficLight_subSystem_step2_SingleTrafficLight_ref0 */
static /*const*/ TrafficLightInterface_const _TrafficLight_subSystem_step2_SingleTrafficLight_ref0_const = {
	"/TrafficLight/subSystem/step2_SingleTrafficLight/ref0"

	/* Ports: {varData, msgService, peerAddress, localId} */
	/* simple ports */
	,{NULL, &msgService_PhysicalThread1, 7+BASE_ADDRESS, 1
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/ref0","/TrafficLight/subSystem/step2_SingleTrafficLight/controller"
	#endif
	} /* Port fct */
	,{NULL, &msgService_PhysicalThread1, 14+BASE_ADDRESS, 2
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/ref0","/TrafficLight/subSystem/step2_SingleTrafficLight/tcpClient"
	#endif
	} /* Port ctrl */
	,{NULL, &msgService_PhysicalThread1, 15+BASE_ADDRESS, 3
	#ifdef ET_ASYNC_MSC_LOGGER_ACTIVATE
	,"/TrafficLight/subSystem/step2_SingleTrafficLight/ref0","/TrafficLight/subSystem/step2_SingleTrafficLight/tcpClient"
	#endif
	} /* Port payload */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
};
static TrafficLightInterface _TrafficLight_subSystem_step2_SingleTrafficLight_ref0 = {
	&_TrafficLight_subSystem_step2_SingleTrafficLight_ref0_const,

	/* data send ports */

	/* attributes */

	/* state and history are initialized in init function */
};

