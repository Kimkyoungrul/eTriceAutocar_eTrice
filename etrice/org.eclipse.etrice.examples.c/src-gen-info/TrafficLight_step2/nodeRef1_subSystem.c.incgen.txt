/**
 * @author generated by eTrice
 *
 * Source File of Node nodeRef1 with SubSystem subSystem
 *
 */

#include <stdio.h>
#include <string.h>


#include "nodeRef1_subSystem.h"

#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "debugging/etDataLogger.h"
#include "messaging/etSystemProtocol.h"
#include "osal/etTimer.h"
#include "osal/etSema.h"
#include "runtime/etRuntime.h"
#include "etRuntimeConfig.h"


/* data for Node nodeRef1 with SubSystem subSystem */
typedef struct nodeRef1_subSystem {
	char *name;
	volatile int shutdownRequest;
} nodeRef1_subSystem;

static nodeRef1_subSystem nodeRef1_subSystemInst = {"nodeRef1_subSystem", 0};

static void nodeRef1_subSystem_initActorInstances(void);
static void nodeRef1_subSystem_constructActorInstances(void);

/* include instances for all classes */
#include "nodeRef1_subSystem_Inst.h"
#include "nodeRef1_subSystem_Disp.h"

static void nodeRef1_subSystem_initMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "initMessageServices")
	{
		etTime interval;

		/* initialization of all message services */
		interval.sec = 0;
		interval.nSec = 100000000;
		etMessageService_init(
			&msgService_PhysicalThread1,
			msgBuffer_PhysicalThread1,
			PHYSICALTHREAD1_POOL_SIZE,
			PHYSICALTHREAD1_BLOCK_SIZE,
			1024,
			0,
			interval,
			MsgDispatcher_PhysicalThread1_receiveMessage,
			EXECMODE_MIXED);

	}

	ET_MSC_LOGGER_SYNC_EXIT
}

static void nodeRef1_subSystem_startMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "startMessageServices")

	etMessageService_start(&msgService_PhysicalThread1);

	ET_MSC_LOGGER_SYNC_EXIT
}

static void nodeRef1_subSystem_stopMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "stopMessageServices")

	etMessageService_stop(&msgService_PhysicalThread1);

	ET_MSC_LOGGER_SYNC_EXIT
}

static void nodeRef1_subSystem_destroyMessageServices(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "destroyMessageServices")

	etMessageService_destroy(&msgService_PhysicalThread1);

	ET_MSC_LOGGER_SYNC_EXIT
}

void nodeRef1_subSystem_init(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "init")
	etLogger_logInfoF("%s_init", nodeRef1_subSystemInst.name);

	/* construct all actors */
	nodeRef1_subSystem_constructActorInstances();

	/* initialization of all message services */
	nodeRef1_subSystem_initMessageServices();

	/* init all actors */
	nodeRef1_subSystem_initActorInstances();


	ET_MSC_LOGGER_SYNC_EXIT
}

void nodeRef1_subSystem_start(void) {
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "start")
	etLogger_logInfoF("%s_start", nodeRef1_subSystemInst.name);
	nodeRef1_subSystem_startMessageServices();
	ET_MSC_LOGGER_SYNC_EXIT
}

void nodeRef1_subSystem_run(etBool runAsTest) {
#ifdef ET_RUNNER_ACTIVATE
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "run")

	if (runAsTest) {
		etSema_waitForWakeup(etRuntime_getTerminateSemaphore());
	}
	else {
		printf("type quit to exit\n");
		fflush(stdout);
		while (ET_TRUE) {
			char line[64];

			if (fgets(line, 64, stdin) != NULL) {
				if (strncmp(line, "quit", 4)==0)
					break;
			}
		}
	}

	ET_MSC_LOGGER_SYNC_EXIT
#endif
}

void nodeRef1_subSystem_stop(void){
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "stop")
	etLogger_logInfoF("%s_stop", nodeRef1_subSystemInst.name);

	nodeRef1_subSystem_stopMessageServices();

	ET_MSC_LOGGER_SYNC_EXIT
}

void nodeRef1_subSystem_destroy(void){
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "destroy")
	etLogger_logInfoF("%s_destroy", nodeRef1_subSystemInst.name);

	ATcpClient_dtor(&_TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient);

	nodeRef1_subSystem_destroyMessageServices();

	ET_MSC_LOGGER_SYNC_EXIT
}

void nodeRef1_subSystem_shutdown(void){
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "shutdown")
	etLogger_logInfoF("%s_shutdown", nodeRef1_subSystemInst.name);

	nodeRef1_subSystemInst.shutdownRequest = 1;

	ET_MSC_LOGGER_SYNC_EXIT
}


static void nodeRef1_subSystem_constructActorInstances(void){
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "constructActorInstances")

	ATcpClient_ctor(&_TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient);

	ET_MSC_LOGGER_SYNC_EXIT
}

static void nodeRef1_subSystem_initActorInstances(void){
	ET_MSC_LOGGER_SYNC_ENTRY("nodeRef1_subSystem", "initActorInstances")

	ATimingService_init(&_TrafficLight_subSystem_timingService);
	SingleTrafficLight_init(&_TrafficLight_subSystem_step2_SingleTrafficLight);
	PedestrianTrafficLightController_init(&_TrafficLight_subSystem_step2_SingleTrafficLight_controller);
	TrafficLightHeadquarters_init(&_TrafficLight_subSystem_step2_SingleTrafficLight_headquarters1);
	ATcpClient_init(&_TrafficLight_subSystem_step2_SingleTrafficLight_tcpClient);
	TrafficLightInterface_init(&_TrafficLight_subSystem_step2_SingleTrafficLight_ref0);

	ET_MSC_LOGGER_SYNC_EXIT
}
