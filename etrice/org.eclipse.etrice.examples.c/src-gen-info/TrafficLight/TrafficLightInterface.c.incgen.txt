/**
 * @author generated by eTrice
 *
 * Source File of ActorClass TrafficLightInterface
 *
 */

#include "TrafficLightInterface.h"

#include "modelbase/etActor.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"
#include "etUnit/etUnit.h"
#include "base/etMemory.h"

#include "room/basic/service/tcp/PTcpControl.h"
#include "room/basic/service/tcp/PTcpPayload.h"
#include "TrafficLight/PTrafficLightInterface.h"

#include "TrafficLightInterface_Utils.h"


/* interface item IDs */
enum interface_items {
	IFITEM_fct = 1,
	IFITEM_ctrl = 2,
	IFITEM_payload = 3
};

/* state IDs */
enum state_ids {
	NO_STATE = 0,
	STATE_TOP = 1,
	STATE_Connecting = 2,
	STATE_Connected = 3,
	STATE_Disconnected = 4,
	STATE_MAX = 5
};

/* transition chains */
enum ChainIDs {
	CHAIN_TRANS_INITIAL_TO__Disconnected = 1,
	CHAIN_TRANS_tr0_FROM_Connected_TO_Connected_BY_setCarRedfct_tr0 = 2,
	CHAIN_TRANS_tr1_FROM_Connecting_TO_Connected_BY_connectedctrl = 3,
	CHAIN_TRANS_tr2_FROM_Disconnected_TO_Connecting_BY_connectfct = 4,
	CHAIN_TRANS_tr3_FROM_Connected_TO_Connected_BY_setCarYellowfct_tr3 = 5,
	CHAIN_TRANS_tr4_FROM_Connected_TO_Connected_BY_setCarGreenfct_tr4 = 6,
	CHAIN_TRANS_tr5_FROM_Connected_TO_Connected_BY_setPedRedfct_tr5 = 7,
	CHAIN_TRANS_tr6_FROM_Connected_TO_Connected_BY_setPedGreenfct_tr6 = 8,
	CHAIN_TRANS_tr7_FROM_Connected_TO_Connected_BY_dataPackagepayload_tr7 = 9,
	CHAIN_TRANS_tr8_FROM_Connected_TO_Connected_BY_setRequestButtonActivefct_tr8 = 10
};

/* triggers */
enum triggers {
	POLLING = 0,
	TRIG_fct__connect = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_connect,
	TRIG_fct__setCarRed = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setCarRed,
	TRIG_fct__setCarYellow = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setCarYellow,
	TRIG_fct__setCarGreen = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setCarGreen,
	TRIG_fct__setPedRed = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setPedRed,
	TRIG_fct__setPedGreen = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setPedGreen,
	TRIG_fct__setRequestButtonActive = IFITEM_fct + EVT_SHIFT*PTrafficLightInterface_IN_setRequestButtonActive,
	TRIG_ctrl__connected = IFITEM_ctrl + EVT_SHIFT*PTcpControl_OUT_connected,
	TRIG_ctrl__disconnected = IFITEM_ctrl + EVT_SHIFT*PTcpControl_OUT_disconnected,
	TRIG_ctrl__error = IFITEM_ctrl + EVT_SHIFT*PTcpControl_OUT_error,
	TRIG_payload__dataPackage = IFITEM_payload + EVT_SHIFT*PTcpPayload_OUT_dataPackage
};

/* state names */
static char* stateStrings[] = {"<no state>","<top>","Connecting",
"Connected",
"Disconnected"
};

static void setState(TrafficLightInterface* self, etInt16 new_state) {
	self->state = new_state;
	ET_MSC_LOGGER_CHANGE_STATE(self->constData->instName, stateStrings[new_state])
}

static etInt16 getState(TrafficLightInterface* self) {
	return self->state;
}

/* Entry and Exit Codes */

/* Action Codes */
static void action_TRANS_tr0_FROM_Connected_TO_Connected_BY_setCarRedfct_tr0(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setCarLightRed", status);
}
static void action_TRANS_tr1_FROM_Connecting_TO_Connected_BY_connectedctrl(TrafficLightInterface* self, const InterfaceItemBase* ifitem) {
    fct_connected();
}
static void action_TRANS_tr2_FROM_Disconnected_TO_Connecting_BY_connectfct(TrafficLightInterface* self, const InterfaceItemBase* ifitem, int32 port) {
    printf("tli: connecting to port %d\n", (int)port);
    DTcpControl config = {"localhost", port};
    ctrl_connect(&config);
}
static void action_TRANS_tr3_FROM_Connected_TO_Connected_BY_setCarYellowfct_tr3(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setCarLightYellow", status);
}
static void action_TRANS_tr4_FROM_Connected_TO_Connected_BY_setCarGreenfct_tr4(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setCarLightGreen", status);
}
static void action_TRANS_tr5_FROM_Connected_TO_Connected_BY_setPedRedfct_tr5(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setPedLightRed", status);
}
static void action_TRANS_tr6_FROM_Connected_TO_Connected_BY_setPedGreenfct_tr6(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setPedLightGreen", status);
}
static void action_TRANS_tr7_FROM_Connected_TO_Connected_BY_dataPackagepayload_tr7(TrafficLightInterface* self, const InterfaceItemBase* ifitem, DTcpPayload* data) {
    char *pressedRequestButtonString = {"pressedRequestButton\n"};
    int32 len = strlen(pressedRequestButtonString);
    if ( (data->length == len) && memcmp(data->data, "pressedRequestButton", len)){
    	fct_pressedRequestButton();
    }
}
static void action_TRANS_tr8_FROM_Connected_TO_Connected_BY_setRequestButtonActivefct_tr8(TrafficLightInterface* self, const InterfaceItemBase* ifitem, bool status) {
    sendOnOffCommand("setRequestButtonActive", status);
}

/* State Switch Methods */
/**
 * calls exit codes while exiting from the current state to one of its
 * parent states while remembering the history
 * @param current__et - the current state
 * @param to - the final parent state
 */
static void exitTo(TrafficLightInterface* self, etInt16 current__et, etInt16 to) {
	while (current__et!=to) {
		switch (current__et) {
			case STATE_Connecting:
				self->history[STATE_TOP] = STATE_Connecting;
				current__et = STATE_TOP;
				break;
			case STATE_Connected:
				self->history[STATE_TOP] = STATE_Connected;
				current__et = STATE_TOP;
				break;
			case STATE_Disconnected:
				self->history[STATE_TOP] = STATE_Disconnected;
				current__et = STATE_TOP;
				break;
			default:
				/* should not occur */
				break;
		}
	}
}

/**
 * calls action, entry and exit codes along a transition chain. The generic data are cast to typed data
 * matching the trigger of this chain. The ID of the final state is returned
 * @param chain__et - the chain ID
 * @param generic_data__et - the generic data pointer
 * @return the +/- ID of the final state either with a positive sign, that indicates to execute the state's entry code, or a negative sign vice versa
 */
static etInt16 executeTransitionChain(TrafficLightInterface* self, int chain__et, const InterfaceItemBase* ifitem, void* generic_data__et) {
	switch (chain__et) {
		case CHAIN_TRANS_INITIAL_TO__Disconnected:
		{
			return STATE_Disconnected;
		}
		case CHAIN_TRANS_tr0_FROM_Connected_TO_Connected_BY_setCarRedfct_tr0:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr0_FROM_Connected_TO_Connected_BY_setCarRedfct_tr0(self, ifitem, status);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr1_FROM_Connecting_TO_Connected_BY_connectedctrl:
		{
			action_TRANS_tr1_FROM_Connecting_TO_Connected_BY_connectedctrl(self, ifitem);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr2_FROM_Disconnected_TO_Connecting_BY_connectfct:
		{
			int32 port = *((int32*) generic_data__et);
			action_TRANS_tr2_FROM_Disconnected_TO_Connecting_BY_connectfct(self, ifitem, port);
			return STATE_Connecting;
		}
		case CHAIN_TRANS_tr3_FROM_Connected_TO_Connected_BY_setCarYellowfct_tr3:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr3_FROM_Connected_TO_Connected_BY_setCarYellowfct_tr3(self, ifitem, status);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr4_FROM_Connected_TO_Connected_BY_setCarGreenfct_tr4:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr4_FROM_Connected_TO_Connected_BY_setCarGreenfct_tr4(self, ifitem, status);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr5_FROM_Connected_TO_Connected_BY_setPedRedfct_tr5:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr5_FROM_Connected_TO_Connected_BY_setPedRedfct_tr5(self, ifitem, status);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr6_FROM_Connected_TO_Connected_BY_setPedGreenfct_tr6:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr6_FROM_Connected_TO_Connected_BY_setPedGreenfct_tr6(self, ifitem, status);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr7_FROM_Connected_TO_Connected_BY_dataPackagepayload_tr7:
		{
			DTcpPayload* data = ((DTcpPayload*) generic_data__et);
			action_TRANS_tr7_FROM_Connected_TO_Connected_BY_dataPackagepayload_tr7(self, ifitem, data);
			return STATE_Connected;
		}
		case CHAIN_TRANS_tr8_FROM_Connected_TO_Connected_BY_setRequestButtonActivefct_tr8:
		{
			bool status = *((bool*) generic_data__et);
			action_TRANS_tr8_FROM_Connected_TO_Connected_BY_setRequestButtonActivefct_tr8(self, ifitem, status);
			return STATE_Connected;
		}
			default:
				/* should not occur */
				break;
	}
	return NO_STATE;
}

/**
 * calls entry codes while entering a state's history. The ID of the final leaf state is returned
 * @param state__et - the state which is entered
 * @return - the ID of the final leaf state
 */
static etInt16 enterHistory(TrafficLightInterface* self, etInt16 state__et) {
	if (state__et >= STATE_MAX) {
		state__et = (etInt16) (state__et - STATE_MAX);
	}
	while (ET_TRUE) {
		switch (state__et) {
			case STATE_Connecting:
				/* in leaf state: return state id */
				return STATE_Connecting;
			case STATE_Connected:
				/* in leaf state: return state id */
				return STATE_Connected;
			case STATE_Disconnected:
				/* in leaf state: return state id */
				return STATE_Disconnected;
			case STATE_TOP:
				state__et = self->history[STATE_TOP];
				break;
			default:
				/* should not occur */
				break;
		}
	}
	/* return NO_STATE; // required by CDT but detected as unreachable by JDT because of while (true) */
}

static void TrafficLightInterface_executeInitTransition(TrafficLightInterface* self) {
	int chain__et = CHAIN_TRANS_INITIAL_TO__Disconnected;
	etInt16 next__et = executeTransitionChain(self, chain__et, NULL, NULL);
	next__et = enterHistory(self, next__et);
	setState(self, next__et);
}

/* receiveEvent contains the main implementation of the FSM */
static void TrafficLightInterface_receiveEventInternal(TrafficLightInterface* self, InterfaceItemBase* ifitem, int localId, int evt, void* generic_data__et) {
	int trigger__et = localId + EVT_SHIFT*evt;
	int chain__et = NOT_CAUGHT;
	etInt16 catching_state__et = NO_STATE;
	((void)trigger__et);	/* avoids unused warning */

	if (!handleSystemEvent(ifitem, evt, generic_data__et)) {
		switch (getState(self)) {
		    case STATE_Connecting:
		        switch(trigger__et) {
		                case TRIG_ctrl__connected:
		                    {
		                        chain__et = CHAIN_TRANS_tr1_FROM_Connecting_TO_Connected_BY_connectedctrl;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_Connected:
		        switch(trigger__et) {
		                case TRIG_fct__setCarRed:
		                    {
		                        chain__et = CHAIN_TRANS_tr0_FROM_Connected_TO_Connected_BY_setCarRedfct_tr0;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fct__setCarYellow:
		                    {
		                        chain__et = CHAIN_TRANS_tr3_FROM_Connected_TO_Connected_BY_setCarYellowfct_tr3;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fct__setCarGreen:
		                    {
		                        chain__et = CHAIN_TRANS_tr4_FROM_Connected_TO_Connected_BY_setCarGreenfct_tr4;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fct__setPedRed:
		                    {
		                        chain__et = CHAIN_TRANS_tr5_FROM_Connected_TO_Connected_BY_setPedRedfct_tr5;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fct__setPedGreen:
		                    {
		                        chain__et = CHAIN_TRANS_tr6_FROM_Connected_TO_Connected_BY_setPedGreenfct_tr6;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_payload__dataPackage:
		                    {
		                        chain__et = CHAIN_TRANS_tr7_FROM_Connected_TO_Connected_BY_dataPackagepayload_tr7;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                case TRIG_fct__setRequestButtonActive:
		                    {
		                        chain__et = CHAIN_TRANS_tr8_FROM_Connected_TO_Connected_BY_setRequestButtonActivefct_tr8;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    case STATE_Disconnected:
		        switch(trigger__et) {
		                case TRIG_fct__connect:
		                    {
		                        chain__et = CHAIN_TRANS_tr2_FROM_Disconnected_TO_Connecting_BY_connectfct;
		                        catching_state__et = STATE_TOP;
		                    }
		                break;
		                default:
		                    /* should not occur */
		                    break;
		        }
		        break;
		    default:
		        /* should not occur */
		        break;
		}
	}
	if (chain__et != NOT_CAUGHT) {
		exitTo(self, getState(self), catching_state__et);
		{
			etInt16 next__et = executeTransitionChain(self, chain__et, ifitem, generic_data__et);
			next__et = enterHistory(self, next__et);
			setState(self, next__et);
		}
	}
}
static void TrafficLightInterface_receiveEvent(TrafficLightInterface* self, InterfaceItemBase* ifitem, int evt, void* generic_data__et) {
	int localId = (ifitem==NULL)? 0 : ifitem->localId;
	TrafficLightInterface_receiveEventInternal(self, ifitem, localId, evt, generic_data__et);
}

void TrafficLightInterface_init(TrafficLightInterface* self){
	ET_MSC_LOGGER_SYNC_ENTRY("TrafficLightInterface", "init")
	self->state = STATE_TOP;
	{
		int i;
		for (i=0; i<TRAFFICLIGHTINTERFACE_HISTORY_SIZE; ++i)
			self->history[i] = NO_STATE;
	}
	TrafficLightInterface_executeInitTransition(self);
	ET_MSC_LOGGER_SYNC_EXIT
}


void TrafficLightInterface_receiveMessage(void* self, const void* ifitem, const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("TrafficLightInterface", "_receiveMessage")
	TrafficLightInterface_receiveEvent(self, (etPort*)ifitem, msg->evtID, (void*)(((char*)msg)+MEM_CEIL(sizeof(etMessage))));

	ET_MSC_LOGGER_SYNC_EXIT
}


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 void TrafficLightInterface_sendPayloadString(TrafficLightInterface* self, char* data) {
	DTcpPayload package;
	DTcpPayload_setAsString(&package, data);
	payload_dataPackage(&package);
}
 void TrafficLightInterface_sendOnOffCommand(TrafficLightInterface* self, char* lightString, bool status) {
	DTcpPayload package;
	strcpy(package.data, lightString);
	if (status==0){
		strcat(package.data, "=off\n");
	}
	else {
		strcat(package.data, "=on\n");
	}
	printf("package=%s", package.data);
	package.length = strlen(package.data);
	payload_dataPackage(&package);
}

