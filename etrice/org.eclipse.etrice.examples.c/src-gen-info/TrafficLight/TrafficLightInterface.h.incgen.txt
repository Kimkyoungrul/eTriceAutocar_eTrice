/**
 * @author generated by eTrice
 *
 * Header File of ActorClass TrafficLightInterface
 *
 */

#ifndef _TRAFFICLIGHT_TRAFFICLIGHTINTERFACE_H_
#define _TRAFFICLIGHT_TRAFFICLIGHTINTERFACE_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "room/basic/service/tcp/PTcpControl.h"
#include "room/basic/service/tcp/PTcpPayload.h"
#include "TrafficLight/PTrafficLightInterface.h"


typedef struct TrafficLightInterface TrafficLightInterface;

/* const part of ActorClass (ROM) */
typedef struct TrafficLightInterface_const {
	const char* instName;

	/* simple ports */
	const PTrafficLightInterfacePort fct;
	const PTcpControlConjPort ctrl;
	const PTcpPayloadConjPort payload;

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
} TrafficLightInterface_const;


/* constant for state machine data */
#define TRAFFICLIGHTINTERFACE_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct TrafficLightInterface {
	const TrafficLightInterface_const* const constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/


	/* state machine variables */
	etInt16 state;
	etInt16 history[TRAFFICLIGHTINTERFACE_HISTORY_SIZE];
};

void TrafficLightInterface_init(TrafficLightInterface* self);

void TrafficLightInterface_receiveMessage(void* self, const void* ifitem, const etMessage* msg);


/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 void TrafficLightInterface_sendPayloadString(TrafficLightInterface* self, char* data);
 void TrafficLightInterface_sendOnOffCommand(TrafficLightInterface* self, char* lightString, bool status);


#endif /* _TRAFFICLIGHT_TRAFFICLIGHTINTERFACE_H_ */

